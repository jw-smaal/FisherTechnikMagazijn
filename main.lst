
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000007c0  00000874  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007c0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  00000874  2**0
                  ALLOC
  3 .signature    00000003  00840000  00840000  00000874  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .stab         0000297c  00000000  00000000  00000878  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000015a5  00000000  00000000  000031f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00004799  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 c0 02 	call	0x580	; 0x580 <main>
  88:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_14>:
 * Interrupt Service routines
 *******************************************************************
 */
// TIMER0 compare match with OCR0A fires every 75 pulses
ISR(TIMER0_COMPA_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
    globalXpulses++;  // defined in the model.h
  9c:	80 91 02 01 	lds	r24, 0x0102
  a0:	8f 5f       	subi	r24, 0xFF	; 255
  a2:	80 93 02 01 	sts	0x0102, r24
}
  a6:	8f 91       	pop	r24
  a8:	0f 90       	pop	r0
  aa:	0f be       	out	0x3f, r0	; 63
  ac:	0f 90       	pop	r0
  ae:	1f 90       	pop	r1
  b0:	18 95       	reti

000000b2 <__vector_3>:

// Pint Change Interrupt 0 (pin PB0) fires every pulse (320Hz pulse)
// So we must do the compare (75 pulses == one rotation) ourselves
ISR(PCINT0_vect)
{
  b2:	1f 92       	push	r1
  b4:	0f 92       	push	r0
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	0f 92       	push	r0
  ba:	11 24       	eor	r1, r1
  bc:	8f 93       	push	r24
    globalYpulsesActual++;
  be:	80 91 03 01 	lds	r24, 0x0103
  c2:	8f 5f       	subi	r24, 0xFF	; 255
  c4:	80 93 03 01 	sts	0x0103, r24
    // 75*2 because PCINT is triggered on both up and down flank.
    if(globalYpulsesActual == 75*2){
  c8:	80 91 03 01 	lds	r24, 0x0103
  cc:	86 39       	cpi	r24, 0x96	; 150
  ce:	39 f4       	brne	.+14     	; 0xde <__vector_3+0x2c>
        globalYpulses++;
  d0:	80 91 01 01 	lds	r24, 0x0101
  d4:	8f 5f       	subi	r24, 0xFF	; 255
  d6:	80 93 01 01 	sts	0x0101, r24
        globalYpulsesActual = 0;
  da:	10 92 03 01 	sts	0x0103, r1
    }
}
  de:	8f 91       	pop	r24
  e0:	0f 90       	pop	r0
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	0f 90       	pop	r0
  e6:	1f 90       	pop	r1
  e8:	18 95       	reti

000000ea <init_mcu>:
{
    /**
     * INIT data direction register:
     */
    // Outputs
    DDRB =  (1<<OUT_MOTOR_Y2) | (1<<OUT_MOTOR_Z1) | (1<<OUT_MOTOR_Z2);
  ea:	8e e0       	ldi	r24, 0x0E	; 14
  ec:	84 b9       	out	0x04, r24	; 4
    // Inputs
    DDRB &= ~((1<<IN_JOYSTICK_LEFT) | (1<<IN_JOYSTICK_DOWN) | (1<<IN_PULSE_MOTOR_Y));
  ee:	84 b1       	in	r24, 0x04	; 4
  f0:	8e 7c       	andi	r24, 0xCE	; 206
  f2:	84 b9       	out	0x04, r24	; 4
    DDRC &= ~( (1<<IN_POTMETER) | (1<<IN_JOYSTICK_UP) | (1<<IN_JOYSTICK_RIGHT) |\
  f4:	87 b1       	in	r24, 0x07	; 7
  f6:	80 7c       	andi	r24, 0xC0	; 192
  f8:	87 b9       	out	0x07, r24	; 7
               (1<<IN_Z_AXIS_OUT) | (1<<IN_Z_AXIS_IN) | (1<<IN_X_AXIS_LIMIT)) ;
    DDRD &= ~((1<<IN_Y_AXIS_LIMIT) | (1<<IN_PULSE_MOTOR_X) );
  fa:	8a b1       	in	r24, 0x0a	; 10
  fc:	8b 7e       	andi	r24, 0xEB	; 235
  fe:	8a b9       	out	0x0a, r24	; 10
    
    // Outputs
    DDRD =  (1<<OUT_MOTOR_X1) | (1<<OUT_MOTOR_X2) | (1<<OUT_MOTOR_Y1) | (1<<OUT_LED);
 100:	89 e6       	ldi	r24, 0x69	; 105
 102:	8a b9       	out	0x0a, r24	; 10
    
    // Enable pullups ; note no pull-up on ADC input!
    PORTB = (1<<IN_JOYSTICK_LEFT) | (1<<IN_JOYSTICK_DOWN) ;
 104:	80 e3       	ldi	r24, 0x30	; 48
 106:	85 b9       	out	0x05, r24	; 5
    PORTC = (1<<IN_JOYSTICK_UP) | (1<<IN_JOYSTICK_RIGHT) | (1<<IN_Z_AXIS_OUT) | \
 108:	8e e3       	ldi	r24, 0x3E	; 62
 10a:	88 b9       	out	0x08, r24	; 8
            (1<<IN_Z_AXIS_IN) | (1<<IN_X_AXIS_LIMIT);
    
    // PORTD = (1<<IN_Y_AXIS_LIMIT) | (1<<IN_PULSE_MOTOR_X); // Don't think you can use the T0 with pull-up
    PORTD = (1<<IN_Y_AXIS_LIMIT);
 10c:	84 e0       	ldi	r24, 0x04	; 4
 10e:	8b b9       	out	0x0b, r24	; 11
    /**
     * INIT timer registers:
     * 1MHz clock (internal RC oscillator)
     */
    // Reset everything
    TIMSK0 &= ~( (1<<OCIE0B) | (1<<OCIE0A) | (1<<TOIE0) );
 110:	ee e6       	ldi	r30, 0x6E	; 110
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	88 7f       	andi	r24, 0xF8	; 248
 118:	80 83       	st	Z, r24
    TCCR0A &= ~( (1<<COM0A1) | (1<<COM0A0) | (1<<COM0B1) | (1<<COM0B0) | \
 11a:	84 b5       	in	r24, 0x24	; 36
 11c:	8c 70       	andi	r24, 0x0C	; 12
 11e:	84 bd       	out	0x24, r24	; 36
                  (1<<WGM01)  | (1<<WGM00) );
    TCCR0B &= ~( (1<<FOC0A) | (1<<FOC0B) | (1<<WGM02) | \
 120:	85 b5       	in	r24, 0x25	; 37
 122:	80 73       	andi	r24, 0x30	; 48
 124:	85 bd       	out	0x25, r24	; 37
                   (1<<CS02) | (1<<CS01)  | (1<<CS00));
    // Set the following
    TCCR0B |= (1<<CS02) | (1<<CS01);    // Clock on T0 pin (falling-edge)
 126:	85 b5       	in	r24, 0x25	; 37
 128:	86 60       	ori	r24, 0x06	; 6
 12a:	85 bd       	out	0x25, r24	; 37
    OCR0A = 75;                         // One  motor rotation causes a CTC match
 12c:	8b e4       	ldi	r24, 0x4B	; 75
 12e:	87 bd       	out	0x27, r24	; 39
    TIMSK0 |= (1<<OCIE0A);              // Output compare fires an interrupt
 130:	80 81       	ld	r24, Z
 132:	82 60       	ori	r24, 0x02	; 2
 134:	80 83       	st	Z, r24
    globalXpulses = 0;
 136:	10 92 02 01 	sts	0x0102, r1
    /** 
     * INIT pin change interrupts
     */
    //EICRA |= (1<<ISC01); // falling edge INT0
   // EIMSK |= (1<<INT0); // Enable INT0  mistake caused software interrupt with no ISR!!!
    PCICR |= (1<<PCIE0); // Pin change Interrupt enable
 13a:	e8 e6       	ldi	r30, 0x68	; 104
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	81 60       	ori	r24, 0x01	; 1
 142:	80 83       	st	Z, r24
    PCMSK0 |= (1<<PCINT0); // Pin Change MASK only on int0
 144:	eb e6       	ldi	r30, 0x6B	; 107
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	81 60       	ori	r24, 0x01	; 1
 14c:	80 83       	st	Z, r24
    globalYpulsesActual = 0;
 14e:	10 92 03 01 	sts	0x0103, r1
    globalYpulses = 0;
 152:	10 92 01 01 	sts	0x0101, r1
    
    
    /**
     * INIT ADC
     */
    ADCSRA |= (1<<ADEN);
 156:	ea e7       	ldi	r30, 0x7A	; 122
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	80 68       	ori	r24, 0x80	; 128
 15e:	80 83       	st	Z, r24
    // ADMUX &= Ëœ(1 <<ADLAR);
    ADMUX = 0x00;
 160:	10 92 7c 00 	sts	0x007C, r1
    
    
    // Set Enable Interrupts
    sei();
 164:	78 94       	sei
    
    /**
     * Put the model into the right starting position
     */
    moveToPickUpPoint();
 166:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <moveToPickUpPoint>

0000016a <motorXturn.part.0>:


void motorXturn(uint8_t direction)
{
    if(direction == LEFT) {
        PORTD &= ~(1<<OUT_MOTOR_X2);
 16a:	5d 98       	cbi	0x0b, 5	; 11
        PORTD |= (1<<OUT_MOTOR_X1);
 16c:	5b 9a       	sbi	0x0b, 3	; 11
 16e:	08 95       	ret

00000170 <motorYturn.part.1>:


void motorYturn(uint8_t direction)
{
    if(direction == UP) {
        PORTB &= ~(1<<OUT_MOTOR_Y2);
 170:	2b 98       	cbi	0x05, 3	; 5
        PORTD |= (1<<OUT_MOTOR_Y1);
 172:	5e 9a       	sbi	0x0b, 6	; 11
 174:	08 95       	ret

00000176 <motorZturn.part.2>:


void motorZturn(uint8_t direction)
{
    if(direction == IN) {
        PORTB &= ~(1<<OUT_MOTOR_Z2);
 176:	29 98       	cbi	0x05, 1	; 5
        PORTB |= (1<<OUT_MOTOR_Z1);
 178:	2a 9a       	sbi	0x05, 2	; 5
 17a:	08 95       	ret

0000017c <flashntimes>:
 * just reading/writing to memory registers.
 *******************************************************************
 */
void flashntimes(uint8_t n){
    uint8_t i;
    for (i = 0; i < n; i++){
 17c:	88 23       	and	r24, r24
 17e:	a9 f0       	breq	.+42     	; 0x1aa <flashntimes+0x2e>
 180:	90 e0       	ldi	r25, 0x00	; 0


void ledOn(void)
{
    //PORTD |= (1<<OUT_LED);
    PORTD &= ~(1<<OUT_LED);
 182:	58 98       	cbi	0x0b, 0	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 184:	2f e5       	ldi	r18, 0x5F	; 95
 186:	3a ee       	ldi	r19, 0xEA	; 234
 188:	40 e0       	ldi	r20, 0x00	; 0
 18a:	21 50       	subi	r18, 0x01	; 1
 18c:	30 40       	sbci	r19, 0x00	; 0
 18e:	40 40       	sbci	r20, 0x00	; 0
 190:	e1 f7       	brne	.-8      	; 0x18a <flashntimes+0xe>
 192:	00 c0       	rjmp	.+0      	; 0x194 <flashntimes+0x18>
 194:	00 00       	nop
}

void ledOff(void)
{
    PORTD |= (1<<OUT_LED);
 196:	58 9a       	sbi	0x0b, 0	; 11
 198:	ef e4       	ldi	r30, 0x4F	; 79
 19a:	f3 ec       	ldi	r31, 0xC3	; 195
 19c:	31 97       	sbiw	r30, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <flashntimes+0x20>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <flashntimes+0x26>
 1a2:	00 00       	nop
 * just reading/writing to memory registers.
 *******************************************************************
 */
void flashntimes(uint8_t n){
    uint8_t i;
    for (i = 0; i < n; i++){
 1a4:	9f 5f       	subi	r25, 0xFF	; 255
 1a6:	98 13       	cpse	r25, r24
 1a8:	ec cf       	rjmp	.-40     	; 0x182 <flashntimes+0x6>
 1aa:	08 95       	ret

000001ac <allOff>:
    PORTD &= ~(1<<OUT_LED);
}

void ledOff(void)
{
    PORTD |= (1<<OUT_LED);
 1ac:	58 9a       	sbi	0x0b, 0	; 11
    }
}

void motorXoff(void)
{
    PORTD &= ~((1<<OUT_MOTOR_X1) | (1<<OUT_MOTOR_X2));
 1ae:	8b b1       	in	r24, 0x0b	; 11
 1b0:	87 7d       	andi	r24, 0xD7	; 215
 1b2:	8b b9       	out	0x0b, r24	; 11
}

void motorYoff(void)
{
    PORTD &= ~(1<<OUT_MOTOR_Y1);
 1b4:	5e 98       	cbi	0x0b, 6	; 11
    PORTB &= ~(1<<OUT_MOTOR_Y2);
 1b6:	2b 98       	cbi	0x05, 3	; 5
}

void motorZoff(void)
{
    PORTB &= ~((1<<OUT_MOTOR_Z1) | (1<<OUT_MOTOR_Z2));
 1b8:	85 b1       	in	r24, 0x05	; 5
 1ba:	89 7f       	andi	r24, 0xF9	; 249
 1bc:	85 b9       	out	0x05, r24	; 5
 1be:	08 95       	ret

000001c0 <moveZin>:
    motorZoff();
}


void moveZin()
{
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <moveZin+0x6>
 1c2:	0e 94 bb 00 	call	0x176	; 0x176 <motorZturn.part.2>
    while((PINC & 1<<IN_Z_AXIS_IN) ? 1: 0){
 1c6:	34 99       	sbic	0x06, 4	; 6
 1c8:	fc cf       	rjmp	.-8      	; 0x1c2 <moveZin+0x2>
    PORTB &= ~(1<<OUT_MOTOR_Y2);
}

void motorZoff(void)
{
    PORTB &= ~((1<<OUT_MOTOR_Z1) | (1<<OUT_MOTOR_Z2));
 1ca:	85 b1       	in	r24, 0x05	; 5
 1cc:	89 7f       	andi	r24, 0xF9	; 249
 1ce:	85 b9       	out	0x05, r24	; 5
 1d0:	08 95       	ret

000001d2 <joystickState>:
}


uint8_t joystickState(void)
{
    if(  ((PINB & 1<<IN_JOYSTICK_LEFT) ? 1: 0)   \
 1d2:	1c 9b       	sbis	0x03, 4	; 3
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <joystickState+0x8>
       && ((PINC & 1<<IN_JOYSTICK_RIGHT) ? 1: 0) \
 1d6:	32 99       	sbic	0x06, 2	; 6
 1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <joystickState+0x10>
       && ((PINC & 1<<IN_JOYSTICK_UP) ? 1: 0)    \
       && ((PINB & 1<<IN_JOYSTICK_DOWN) ? 1: 0) ){
        return JOYSTICK_STATE_CENTRE;
    }
    else if ( (PINB & (1<<IN_JOYSTICK_LEFT)) ? 0: 1 ) {
 1da:	1c 99       	sbic	0x03, 4	; 3
 1dc:	08 c0       	rjmp	.+16     	; 0x1ee <joystickState+0x1c>
        return JOYSTICK_STATE_LEFT;
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	08 95       	ret

uint8_t joystickState(void)
{
    if(  ((PINB & 1<<IN_JOYSTICK_LEFT) ? 1: 0)   \
       && ((PINC & 1<<IN_JOYSTICK_RIGHT) ? 1: 0) \
       && ((PINC & 1<<IN_JOYSTICK_UP) ? 1: 0)    \
 1e2:	31 9b       	sbis	0x06, 1	; 6
 1e4:	fa cf       	rjmp	.-12     	; 0x1da <joystickState+0x8>
       && ((PINB & 1<<IN_JOYSTICK_DOWN) ? 1: 0) ){
 1e6:	1d 9b       	sbis	0x03, 5	; 3
 1e8:	f8 cf       	rjmp	.-16     	; 0x1da <joystickState+0x8>
        return JOYSTICK_STATE_UP;
    }
    else if((PINB & (1<<IN_JOYSTICK_DOWN)) ? 0: 1) {
        return JOYSTICK_STATE_DOWN;
    }
    return JOYSTICK_STATE_CENTRE;
 1ea:	81 e0       	ldi	r24, 0x01	; 1
}
 1ec:	08 95       	ret
        return JOYSTICK_STATE_CENTRE;
    }
    else if ( (PINB & (1<<IN_JOYSTICK_LEFT)) ? 0: 1 ) {
        return JOYSTICK_STATE_LEFT;
    }
    else if((PINC & (1<<IN_JOYSTICK_RIGHT)) ? 0: 1) {
 1ee:	32 99       	sbic	0x06, 2	; 6
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <joystickState+0x24>
        return JOYSTICK_STATE_RIGHT;
 1f2:	83 e0       	ldi	r24, 0x03	; 3
 1f4:	08 95       	ret
    }
    else if((PINC & (1<<IN_JOYSTICK_UP)) ? 0: 1) {
 1f6:	31 99       	sbic	0x06, 1	; 6
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <joystickState+0x2c>
        return JOYSTICK_STATE_UP;
 1fa:	84 e0       	ldi	r24, 0x04	; 4
 1fc:	08 95       	ret
    }
    else if((PINB & (1<<IN_JOYSTICK_DOWN)) ? 0: 1) {
 1fe:	1d 99       	sbic	0x03, 5	; 3
 200:	f4 cf       	rjmp	.-24     	; 0x1ea <joystickState+0x18>
        return JOYSTICK_STATE_DOWN;
 202:	85 e0       	ldi	r24, 0x05	; 5
 204:	08 95       	ret

00000206 <motorXturn>:
}


void motorXturn(uint8_t direction)
{
    if(direction == LEFT) {
 206:	88 23       	and	r24, r24
 208:	19 f0       	breq	.+6      	; 0x210 <motorXturn+0xa>
        PORTD &= ~(1<<OUT_MOTOR_X2);
        PORTD |= (1<<OUT_MOTOR_X1);
    }
    else {  // Right
        PORTD &= ~(1<<OUT_MOTOR_X1);
 20a:	5b 98       	cbi	0x0b, 3	; 11
        PORTD |= (1<<OUT_MOTOR_X2);
 20c:	5d 9a       	sbi	0x0b, 5	; 11
 20e:	08 95       	ret
 210:	0c 94 b5 00 	jmp	0x16a	; 0x16a <motorXturn.part.0>

00000214 <motorXturnSteps>:
        }
    }
}


void motorXturnSteps(uint8_t direction, uint8_t steps){
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	d8 2f       	mov	r29, r24
 21a:	c6 2f       	mov	r28, r22
    globalXpulses= 0;
 21c:	10 92 02 01 	sts	0x0102, r1
    do {
        motorXturn(direction);
 220:	8d 2f       	mov	r24, r29
 222:	0e 94 03 01 	call	0x206	; 0x206 <motorXturn>
    }
    while (globalXpulses < steps);
 226:	90 91 02 01 	lds	r25, 0x0102
 22a:	9c 17       	cp	r25, r28
 22c:	c8 f3       	brcs	.-14     	; 0x220 <motorXturnSteps+0xc>
    }
}

void motorXoff(void)
{
    PORTD &= ~((1<<OUT_MOTOR_X1) | (1<<OUT_MOTOR_X2));
 22e:	8b b1       	in	r24, 0x0b	; 11
 230:	87 7d       	andi	r24, 0xD7	; 215
 232:	8b b9       	out	0x0b, r24	; 11
    do {
        motorXturn(direction);
    }
    while (globalXpulses < steps);
    motorXoff();
}
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	08 95       	ret

0000023a <motorXmoveToPosition>:
    while (globalYpulses < steps);
    motorYoff();
}

void motorXmoveToPosition(uint8_t position)
{
 23a:	cf 93       	push	r28
 23c:	c8 2f       	mov	r28, r24
    if (globalXposition < position){
 23e:	80 91 00 01 	lds	r24, 0x0100
 242:	8c 17       	cp	r24, r28
 244:	90 f0       	brcs	.+36     	; 0x26a <motorXmoveToPosition+0x30>
        motorXturnSteps(LEFT, position - globalXposition);
    }
    else if (globalXposition > position){
 246:	80 91 00 01 	lds	r24, 0x0100
 24a:	c8 17       	cp	r28, r24
 24c:	20 f0       	brcs	.+8      	; 0x256 <motorXmoveToPosition+0x1c>
        motorXturnSteps(RIGHT, globalXposition - position);
    }
    else {
        // do nothing i.e. position was already reached
    }
    globalXposition = position;
 24e:	c0 93 00 01 	sts	0x0100, r28
}
 252:	cf 91       	pop	r28
 254:	08 95       	ret
{
    if (globalXposition < position){
        motorXturnSteps(LEFT, position - globalXposition);
    }
    else if (globalXposition > position){
        motorXturnSteps(RIGHT, globalXposition - position);
 256:	60 91 00 01 	lds	r22, 0x0100
 25a:	6c 1b       	sub	r22, r28
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	0e 94 0a 01 	call	0x214	; 0x214 <motorXturnSteps>
    }
    else {
        // do nothing i.e. position was already reached
    }
    globalXposition = position;
 262:	c0 93 00 01 	sts	0x0100, r28
}
 266:	cf 91       	pop	r28
 268:	08 95       	ret
}

void motorXmoveToPosition(uint8_t position)
{
    if (globalXposition < position){
        motorXturnSteps(LEFT, position - globalXposition);
 26a:	80 91 00 01 	lds	r24, 0x0100
 26e:	6c 2f       	mov	r22, r28
 270:	68 1b       	sub	r22, r24
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	0e 94 0a 01 	call	0x214	; 0x214 <motorXturnSteps>
        motorXturnSteps(RIGHT, globalXposition - position);
    }
    else {
        // do nothing i.e. position was already reached
    }
    globalXposition = position;
 278:	c0 93 00 01 	sts	0x0100, r28
}
 27c:	cf 91       	pop	r28
 27e:	08 95       	ret

00000280 <motorYturn>:



void motorYturn(uint8_t direction)
{
    if(direction == UP) {
 280:	88 23       	and	r24, r24
 282:	19 f0       	breq	.+6      	; 0x28a <motorYturn+0xa>
        PORTB &= ~(1<<OUT_MOTOR_Y2);
        PORTD |= (1<<OUT_MOTOR_Y1);
    }
    else {  // DOWN
        PORTD &= ~(1<<OUT_MOTOR_Y1);
 284:	5e 98       	cbi	0x0b, 6	; 11
        PORTB |= (1<<OUT_MOTOR_Y2);
 286:	2b 9a       	sbi	0x05, 3	; 5
 288:	08 95       	ret
 28a:	0c 94 b8 00 	jmp	0x170	; 0x170 <motorYturn.part.1>

0000028e <moveToPosition>:
    globalYpulses = 0;
    globalYpulsesActual = 0;
    //allOff();
}

void moveToPosition(uint8_t x, uint8_t y){
 28e:	df 92       	push	r13
 290:	ef 92       	push	r14
 292:	ff 92       	push	r15
 294:	0f 93       	push	r16
 296:	1f 93       	push	r17
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	1f 92       	push	r1
 29e:	cd b7       	in	r28, 0x3d	; 61
 2a0:	de b7       	in	r29, 0x3e	; 62
 2a2:	18 2f       	mov	r17, r24
 2a4:	06 2f       	mov	r16, r22
    uint8_t xoffset = 0;
    uint8_t yoffset = 0;
    uint8_t xdirection = NONE;
    uint8_t ydirection = NONE;
    
    if (globalYposition == x && globalYposition == y){
 2a6:	80 91 04 01 	lds	r24, 0x0104
 2aa:	81 17       	cp	r24, r17
 2ac:	09 f4       	brne	.+2      	; 0x2b0 <moveToPosition+0x22>
 2ae:	b6 c0       	rjmp	.+364    	; 0x41c <moveToPosition+0x18e>
        return;
    }

    globalXpulses = 0;
 2b0:	10 92 02 01 	sts	0x0102, r1
    globalYpulses = 0;
 2b4:	10 92 01 01 	sts	0x0101, r1
    globalYpulsesActual = 0;
 2b8:	10 92 03 01 	sts	0x0103, r1
void moveToPosition(uint8_t x, uint8_t y){
    uint8_t positionreached = 0;
    uint8_t xoffset = 0;
    uint8_t yoffset = 0;
    uint8_t xdirection = NONE;
    uint8_t ydirection = NONE;
 2bc:	83 e0       	ldi	r24, 0x03	; 3
 2be:	f8 2e       	mov	r15, r24

void moveToPosition(uint8_t x, uint8_t y){
    uint8_t positionreached = 0;
    uint8_t xoffset = 0;
    uint8_t yoffset = 0;
    uint8_t xdirection = NONE;
 2c0:	93 e0       	ldi	r25, 0x03	; 3
}

void moveToPosition(uint8_t x, uint8_t y){
    uint8_t positionreached = 0;
    uint8_t xoffset = 0;
    uint8_t yoffset = 0;
 2c2:	d1 2c       	mov	r13, r1
    //allOff();
}

void moveToPosition(uint8_t x, uint8_t y){
    uint8_t positionreached = 0;
    uint8_t xoffset = 0;
 2c4:	e1 2c       	mov	r14, r1
    globalYpulsesActual = 0;
    
    
    while(!positionreached) {
        /* X-axis */
        if(globalXposition < x){
 2c6:	80 91 00 01 	lds	r24, 0x0100
 2ca:	81 17       	cp	r24, r17
 2cc:	08 f4       	brcc	.+2      	; 0x2d0 <moveToPosition+0x42>
 2ce:	83 c0       	rjmp	.+262    	; 0x3d6 <moveToPosition+0x148>
            // move left
            xoffset = x - globalXposition;
            motorXturn(LEFT);
            xdirection = LEFT;
        }
        else if(globalXposition > x){
 2d0:	80 91 00 01 	lds	r24, 0x0100
 2d4:	18 17       	cp	r17, r24
 2d6:	08 f0       	brcs	.+2      	; 0x2da <moveToPosition+0x4c>
 2d8:	67 c0       	rjmp	.+206    	; 0x3a8 <moveToPosition+0x11a>
            if(!(PINC & 1<<IN_X_AXIS_LIMIT)){
 2da:	35 99       	sbic	0x06, 5	; 6
 2dc:	8c c0       	rjmp	.+280    	; 0x3f6 <moveToPosition+0x168>
                // We have reached the x-limit
                globalXposition = 0;
 2de:	10 92 00 01 	sts	0x0100, r1
                globalXpulses = 0;
 2e2:	10 92 02 01 	sts	0x0102, r1
    }
}

void motorXoff(void)
{
    PORTD &= ~((1<<OUT_MOTOR_X1) | (1<<OUT_MOTOR_X2));
 2e6:	8b b1       	in	r24, 0x0b	; 11
 2e8:	87 7d       	andi	r24, 0xD7	; 215
 2ea:	8b b9       	out	0x0b, r24	; 11
                // We have reached the x-limit
                globalXposition = 0;
                globalXpulses = 0;
                xoffset = 0;
                motorXoff();
                xdirection = NONE;
 2ec:	93 e0       	ldi	r25, 0x03	; 3
        else if(globalXposition > x){
            if(!(PINC & 1<<IN_X_AXIS_LIMIT)){
                // We have reached the x-limit
                globalXposition = 0;
                globalXpulses = 0;
                xoffset = 0;
 2ee:	e1 2c       	mov	r14, r1
            xoffset = 0;
            motorXoff();
        }
        
        /* Y-axis */
        if(globalYposition < y){
 2f0:	80 91 04 01 	lds	r24, 0x0104
 2f4:	80 17       	cp	r24, r16
 2f6:	08 f4       	brcc	.+2      	; 0x2fa <moveToPosition+0x6c>
 2f8:	64 c0       	rjmp	.+200    	; 0x3c2 <moveToPosition+0x134>
            // move up
            yoffset = y - globalYposition;
            motorYturn(UP);
            ydirection = UP;
        }
        else if(globalYposition > y){
 2fa:	80 91 04 01 	lds	r24, 0x0104
 2fe:	08 17       	cp	r16, r24
 300:	08 f0       	brcs	.+2      	; 0x304 <moveToPosition+0x76>
 302:	4a c0       	rjmp	.+148    	; 0x398 <moveToPosition+0x10a>
            if(!(PIND & 1<<IN_Y_AXIS_LIMIT)){
 304:	4a 99       	sbic	0x09, 2	; 9
 306:	7f c0       	rjmp	.+254    	; 0x406 <moveToPosition+0x178>
                globalYposition = 0;
 308:	10 92 04 01 	sts	0x0104, r1
                globalYpulses = 0;
 30c:	10 92 01 01 	sts	0x0101, r1
                globalYpulsesActual = 0;
 310:	10 92 03 01 	sts	0x0103, r1
    PORTD &= ~((1<<OUT_MOTOR_X1) | (1<<OUT_MOTOR_X2));
}

void motorYoff(void)
{
    PORTD &= ~(1<<OUT_MOTOR_Y1);
 314:	5e 98       	cbi	0x0b, 6	; 11
    PORTB &= ~(1<<OUT_MOTOR_Y2);
 316:	2b 98       	cbi	0x05, 3	; 5
                globalYposition = 0;
                globalYpulses = 0;
                globalYpulsesActual = 0;
                yoffset = 0;
                motorYoff();
                xdirection = NONE;
 318:	93 e0       	ldi	r25, 0x03	; 3
        else if(globalYposition > y){
            if(!(PIND & 1<<IN_Y_AXIS_LIMIT)){
                globalYposition = 0;
                globalYpulses = 0;
                globalYpulsesActual = 0;
                yoffset = 0;
 31a:	d1 2c       	mov	r13, r1
            // turn Y motor off
            yoffset = 0;
            motorYoff();
        }
        
        if(xoffset!=0){
 31c:	ee 20       	and	r14, r14
 31e:	19 f0       	breq	.+6      	; 0x326 <moveToPosition+0x98>
            xoffset = xoffset - globalXpulses;
 320:	80 91 02 01 	lds	r24, 0x0102
 324:	e8 1a       	sub	r14, r24
        }
        if(yoffset!=0){
 326:	dd 20       	and	r13, r13
 328:	19 f0       	breq	.+6      	; 0x330 <moveToPosition+0xa2>
            yoffset = yoffset - globalYpulses;
 32a:	80 91 01 01 	lds	r24, 0x0101
 32e:	d8 1a       	sub	r13, r24
        }
  
        // FIXME!!!! 
        // TODO update globalX  position !!!
        if(xdirection == LEFT){
 330:	91 11       	cpse	r25, r1
 332:	1f c0       	rjmp	.+62     	; 0x372 <moveToPosition+0xe4>
            globalXposition = globalXposition + globalXpulses;
 334:	20 91 00 01 	lds	r18, 0x0100
 338:	80 91 02 01 	lds	r24, 0x0102
 33c:	82 0f       	add	r24, r18
 33e:	80 93 00 01 	sts	0x0100, r24
        else if(xdirection == RIGHT){
            globalXposition = globalXposition - globalXpulses;
        }
        
        // TODO update globalY position !!!
        if(ydirection == UP){
 342:	ff 20       	and	r15, r15
 344:	09 f1       	breq	.+66     	; 0x388 <moveToPosition+0xfa>
        else if(xdirection == DOWN){
            globalYposition = globalYposition - globalYpulses;
        }
        
        // If both offsets are zero we have reach our position
        if ((xoffset == 0) && (yoffset == 0)){
 346:	e1 10       	cpse	r14, r1
 348:	be cf       	rjmp	.-132    	; 0x2c6 <moveToPosition+0x38>
 34a:	d1 10       	cpse	r13, r1
 34c:	bc cf       	rjmp	.-136    	; 0x2c6 <moveToPosition+0x38>
            positionreached =1;
            globalXposition = x;
 34e:	10 93 00 01 	sts	0x0100, r17
            globalYposition = y;
 352:	00 93 04 01 	sts	0x0104, r16
    }
}

void motorXoff(void)
{
    PORTD &= ~((1<<OUT_MOTOR_X1) | (1<<OUT_MOTOR_X2));
 356:	8b b1       	in	r24, 0x0b	; 11
 358:	87 7d       	andi	r24, 0xD7	; 215
 35a:	8b b9       	out	0x0b, r24	; 11
}

void motorYoff(void)
{
    PORTD &= ~(1<<OUT_MOTOR_Y1);
 35c:	5e 98       	cbi	0x0b, 6	; 11
    PORTB &= ~(1<<OUT_MOTOR_Y2);
 35e:	2b 98       	cbi	0x05, 3	; 5
            globalYposition = y;
            motorXoff();
            motorYoff();
        }
    }
}
 360:	0f 90       	pop	r0
 362:	df 91       	pop	r29
 364:	cf 91       	pop	r28
 366:	1f 91       	pop	r17
 368:	0f 91       	pop	r16
 36a:	ff 90       	pop	r15
 36c:	ef 90       	pop	r14
 36e:	df 90       	pop	r13
 370:	08 95       	ret
        // FIXME!!!! 
        // TODO update globalX  position !!!
        if(xdirection == LEFT){
            globalXposition = globalXposition + globalXpulses;
        }
        else if(xdirection == RIGHT){
 372:	91 30       	cpi	r25, 0x01	; 1
 374:	31 f7       	brne	.-52     	; 0x342 <moveToPosition+0xb4>
            globalXposition = globalXposition - globalXpulses;
 376:	80 91 00 01 	lds	r24, 0x0100
 37a:	20 91 02 01 	lds	r18, 0x0102
 37e:	82 1b       	sub	r24, r18
 380:	80 93 00 01 	sts	0x0100, r24
        }
        
        // TODO update globalY position !!!
        if(ydirection == UP){
 384:	f1 10       	cpse	r15, r1
 386:	2f c0       	rjmp	.+94     	; 0x3e6 <moveToPosition+0x158>
            globalYposition = globalYposition + globalYpulses;
 388:	20 91 04 01 	lds	r18, 0x0104
 38c:	80 91 01 01 	lds	r24, 0x0101
 390:	82 0f       	add	r24, r18
 392:	80 93 04 01 	sts	0x0104, r24
 396:	d7 cf       	rjmp	.-82     	; 0x346 <moveToPosition+0xb8>
                yoffset = globalYposition - y;
                motorYturn(DOWN);
                ydirection = DOWN;
            }
        }
        else if(globalYposition == y){
 398:	80 91 04 01 	lds	r24, 0x0104
 39c:	80 13       	cpse	r24, r16
 39e:	be cf       	rjmp	.-132    	; 0x31c <moveToPosition+0x8e>
    PORTD &= ~((1<<OUT_MOTOR_X1) | (1<<OUT_MOTOR_X2));
}

void motorYoff(void)
{
    PORTD &= ~(1<<OUT_MOTOR_Y1);
 3a0:	5e 98       	cbi	0x0b, 6	; 11
    PORTB &= ~(1<<OUT_MOTOR_Y2);
 3a2:	2b 98       	cbi	0x05, 3	; 5
                ydirection = DOWN;
            }
        }
        else if(globalYposition == y){
            // turn Y motor off
            yoffset = 0;
 3a4:	d1 2c       	mov	r13, r1
 3a6:	ba cf       	rjmp	.-140    	; 0x31c <moveToPosition+0x8e>
                xoffset = globalXposition - x;
                motorXturn(RIGHT);
                xdirection = RIGHT;
            }
        }
        else if(globalXposition == x){
 3a8:	80 91 00 01 	lds	r24, 0x0100
 3ac:	81 13       	cpse	r24, r17
 3ae:	a0 cf       	rjmp	.-192    	; 0x2f0 <moveToPosition+0x62>
    }
}

void motorXoff(void)
{
    PORTD &= ~((1<<OUT_MOTOR_X1) | (1<<OUT_MOTOR_X2));
 3b0:	8b b1       	in	r24, 0x0b	; 11
 3b2:	87 7d       	andi	r24, 0xD7	; 215
 3b4:	8b b9       	out	0x0b, r24	; 11
                xdirection = RIGHT;
            }
        }
        else if(globalXposition == x){
            // turn X motor off
            xoffset = 0;
 3b6:	e1 2c       	mov	r14, r1
            motorXoff();
        }
        
        /* Y-axis */
        if(globalYposition < y){
 3b8:	80 91 04 01 	lds	r24, 0x0104
 3bc:	80 17       	cp	r24, r16
 3be:	08 f0       	brcs	.+2      	; 0x3c2 <moveToPosition+0x134>
 3c0:	9c cf       	rjmp	.-200    	; 0x2fa <moveToPosition+0x6c>
            // move up
            yoffset = y - globalYposition;
 3c2:	80 91 04 01 	lds	r24, 0x0104
 3c6:	d0 2e       	mov	r13, r16
 3c8:	d8 1a       	sub	r13, r24
 3ca:	99 83       	std	Y+1, r25	; 0x01
 3cc:	0e 94 b8 00 	call	0x170	; 0x170 <motorYturn.part.1>
            motorYturn(UP);
            ydirection = UP;
 3d0:	f1 2c       	mov	r15, r1
 3d2:	99 81       	ldd	r25, Y+1	; 0x01
 3d4:	a3 cf       	rjmp	.-186    	; 0x31c <moveToPosition+0x8e>
    
    while(!positionreached) {
        /* X-axis */
        if(globalXposition < x){
            // move left
            xoffset = x - globalXposition;
 3d6:	80 91 00 01 	lds	r24, 0x0100
 3da:	e1 2e       	mov	r14, r17
 3dc:	e8 1a       	sub	r14, r24
 3de:	0e 94 b5 00 	call	0x16a	; 0x16a <motorXturn.part.0>
            motorXturn(LEFT);
            xdirection = LEFT;
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	85 cf       	rjmp	.-246    	; 0x2f0 <moveToPosition+0x62>
        // TODO update globalY position !!!
        if(ydirection == UP){
            globalYposition = globalYposition + globalYpulses;
        }
        else if(xdirection == DOWN){
            globalYposition = globalYposition - globalYpulses;
 3e6:	80 91 04 01 	lds	r24, 0x0104
 3ea:	20 91 01 01 	lds	r18, 0x0101
 3ee:	82 1b       	sub	r24, r18
 3f0:	80 93 04 01 	sts	0x0104, r24
 3f4:	a8 cf       	rjmp	.-176    	; 0x346 <moveToPosition+0xb8>
                motorXoff();
                xdirection = NONE;
            }
            else {
                // Move right
                xoffset = globalXposition - x;
 3f6:	e0 90 00 01 	lds	r14, 0x0100
 3fa:	e1 1a       	sub	r14, r17
                motorXturn(RIGHT);
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	0e 94 03 01 	call	0x206	; 0x206 <motorXturn>
                xdirection = RIGHT;
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	75 cf       	rjmp	.-278    	; 0x2f0 <moveToPosition+0x62>
                motorYoff();
                xdirection = NONE;
            }
            else {
                // Move down; Check for IN_Y_AXIS_LIMIT
                yoffset = globalYposition - y;
 406:	d0 90 04 01 	lds	r13, 0x0104
 40a:	d0 1a       	sub	r13, r16
                motorYturn(DOWN);
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	99 83       	std	Y+1, r25	; 0x01
 410:	0e 94 40 01 	call	0x280	; 0x280 <motorYturn>
                ydirection = DOWN;
 414:	ff 24       	eor	r15, r15
 416:	f3 94       	inc	r15
 418:	99 81       	ldd	r25, Y+1	; 0x01
 41a:	80 cf       	rjmp	.-256    	; 0x31c <moveToPosition+0x8e>
    uint8_t xoffset = 0;
    uint8_t yoffset = 0;
    uint8_t xdirection = NONE;
    uint8_t ydirection = NONE;
    
    if (globalYposition == x && globalYposition == y){
 41c:	80 91 04 01 	lds	r24, 0x0104
 420:	86 13       	cpse	r24, r22
 422:	46 cf       	rjmp	.-372    	; 0x2b0 <moveToPosition+0x22>
 424:	9d cf       	rjmp	.-198    	; 0x360 <moveToPosition+0xd2>

00000426 <motorYturnSteps>:
    }
    while (globalXpulses < steps);
    motorXoff();
}

void motorYturnSteps(uint8_t direction, uint8_t steps){
 426:	cf 93       	push	r28
 428:	df 93       	push	r29
 42a:	d8 2f       	mov	r29, r24
 42c:	c6 2f       	mov	r28, r22
    globalYpulses= 0;
 42e:	10 92 01 01 	sts	0x0101, r1
    globalYpulsesActual = 0;
 432:	10 92 03 01 	sts	0x0103, r1
    do {
        motorYturn(direction);
 436:	8d 2f       	mov	r24, r29
 438:	0e 94 40 01 	call	0x280	; 0x280 <motorYturn>
    }
    while (globalYpulses < steps);
 43c:	90 91 01 01 	lds	r25, 0x0101
 440:	9c 17       	cp	r25, r28
 442:	c8 f3       	brcs	.-14     	; 0x436 <motorYturnSteps+0x10>
    PORTD &= ~((1<<OUT_MOTOR_X1) | (1<<OUT_MOTOR_X2));
}

void motorYoff(void)
{
    PORTD &= ~(1<<OUT_MOTOR_Y1);
 444:	5e 98       	cbi	0x0b, 6	; 11
    PORTB &= ~(1<<OUT_MOTOR_Y2);
 446:	2b 98       	cbi	0x05, 3	; 5
    do {
        motorYturn(direction);
    }
    while (globalYpulses < steps);
    motorYoff();
}
 448:	df 91       	pop	r29
 44a:	cf 91       	pop	r28
 44c:	08 95       	ret

0000044e <motorYmoveToPosition>:
    globalXposition = position;
}


void motorYmoveToPosition(uint8_t position)
{
 44e:	cf 93       	push	r28
 450:	c8 2f       	mov	r28, r24
    if (globalYposition < position){
 452:	80 91 04 01 	lds	r24, 0x0104
 456:	8c 17       	cp	r24, r28
 458:	90 f0       	brcs	.+36     	; 0x47e <motorYmoveToPosition+0x30>
        motorYturnSteps(UP, position - globalYposition);
    }
    else if (globalYposition > position){
 45a:	80 91 04 01 	lds	r24, 0x0104
 45e:	c8 17       	cp	r28, r24
 460:	20 f0       	brcs	.+8      	; 0x46a <motorYmoveToPosition+0x1c>
        motorYturnSteps(DOWN, globalYposition - position);
    }
    else {
        // do nothing i.e. position was already reached
    }
    globalYposition = position;
 462:	c0 93 04 01 	sts	0x0104, r28
}
 466:	cf 91       	pop	r28
 468:	08 95       	ret
{
    if (globalYposition < position){
        motorYturnSteps(UP, position - globalYposition);
    }
    else if (globalYposition > position){
        motorYturnSteps(DOWN, globalYposition - position);
 46a:	60 91 04 01 	lds	r22, 0x0104
 46e:	6c 1b       	sub	r22, r28
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	0e 94 13 02 	call	0x426	; 0x426 <motorYturnSteps>
    }
    else {
        // do nothing i.e. position was already reached
    }
    globalYposition = position;
 476:	c0 93 04 01 	sts	0x0104, r28
}
 47a:	cf 91       	pop	r28
 47c:	08 95       	ret


void motorYmoveToPosition(uint8_t position)
{
    if (globalYposition < position){
        motorYturnSteps(UP, position - globalYposition);
 47e:	80 91 04 01 	lds	r24, 0x0104
 482:	6c 2f       	mov	r22, r28
 484:	68 1b       	sub	r22, r24
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	0e 94 13 02 	call	0x426	; 0x426 <motorYturnSteps>
        motorYturnSteps(DOWN, globalYposition - position);
    }
    else {
        // do nothing i.e. position was already reached
    }
    globalYposition = position;
 48c:	c0 93 04 01 	sts	0x0104, r28
}
 490:	cf 91       	pop	r28
 492:	08 95       	ret

00000494 <motorZturn>:
}


void motorZturn(uint8_t direction)
{
    if(direction == IN) {
 494:	88 23       	and	r24, r24
 496:	19 f0       	breq	.+6      	; 0x49e <motorZturn+0xa>
        PORTB &= ~(1<<OUT_MOTOR_Z2);
        PORTB |= (1<<OUT_MOTOR_Z1);
    }
    else {  // OUT
        PORTB &= ~(1<<OUT_MOTOR_Z1);
 498:	2a 98       	cbi	0x05, 2	; 5
        PORTB |= (1<<OUT_MOTOR_Z2);
 49a:	29 9a       	sbi	0x05, 1	; 5
 49c:	08 95       	ret
 49e:	0c 94 bb 00 	jmp	0x176	; 0x176 <motorZturn.part.2>

000004a2 <moveZout>:
    }
    motorZoff();
}

void moveZout()
{
 4a2:	03 c0       	rjmp	.+6      	; 0x4aa <moveZout+0x8>
    while((PINC & 1<<IN_Z_AXIS_OUT) ? 1: 0){
        motorZturn(OUT);
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	0e 94 4a 02 	call	0x494	; 0x494 <motorZturn>
    motorZoff();
}

void moveZout()
{
    while((PINC & 1<<IN_Z_AXIS_OUT) ? 1: 0){
 4aa:	33 99       	sbic	0x06, 3	; 6
 4ac:	fb cf       	rjmp	.-10     	; 0x4a4 <moveZout+0x2>
    PORTB &= ~(1<<OUT_MOTOR_Y2);
}

void motorZoff(void)
{
    PORTB &= ~((1<<OUT_MOTOR_Z1) | (1<<OUT_MOTOR_Z2));
 4ae:	85 b1       	in	r24, 0x05	; 5
 4b0:	89 7f       	andi	r24, 0xF9	; 249
 4b2:	85 b9       	out	0x05, r24	; 5
 4b4:	08 95       	ret

000004b6 <moveToPickUpPoint>:
    motorZoff();
}


void moveToPickUpPoint()
{
 4b6:	cf 93       	push	r28
    uint8_t xlimitreached;
    uint8_t ylimitreached;
    uint8_t positionreached;
  
    
    moveZin();
 4b8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <moveZin>
    
    xlimitreached = (PINC & 1<<IN_X_AXIS_LIMIT) ? 0: 1;
 4bc:	86 b1       	in	r24, 0x06	; 6
 4be:	91 e0       	ldi	r25, 0x01	; 1
 4c0:	85 fb       	bst	r24, 5
 4c2:	88 27       	eor	r24, r24
 4c4:	80 f9       	bld	r24, 0
 4c6:	89 27       	eor	r24, r25
    ylimitreached = (PIND & 1<<IN_Y_AXIS_LIMIT) ? 0: 1;
 4c8:	c9 b1       	in	r28, 0x09	; 9
 4ca:	c2 fb       	bst	r28, 2
 4cc:	cc 27       	eor	r28, r28
 4ce:	c0 f9       	bld	r28, 0
 4d0:	c9 27       	eor	r28, r25
    positionreached = xlimitreached && ylimitreached;
 4d2:	88 23       	and	r24, r24
 4d4:	11 f0       	breq	.+4      	; 0x4da <moveToPickUpPoint+0x24>
    
    while(!positionreached){
 4d6:	c1 11       	cpse	r28, r1
 4d8:	1f c0       	rjmp	.+62     	; 0x518 <moveToPickUpPoint+0x62>
        if(!xlimitreached) {
 4da:	88 23       	and	r24, r24
 4dc:	a1 f0       	breq	.+40     	; 0x506 <moveToPickUpPoint+0x50>
    }
}

void motorXoff(void)
{
    PORTD &= ~((1<<OUT_MOTOR_X1) | (1<<OUT_MOTOR_X2));
 4de:	8b b1       	in	r24, 0x0b	; 11
 4e0:	87 7d       	andi	r24, 0xD7	; 215
 4e2:	8b b9       	out	0x0b, r24	; 11
        }
        else {
            motorXoff();
        }
        
        if(!ylimitreached){
 4e4:	cc 23       	and	r28, r28
 4e6:	a1 f0       	breq	.+40     	; 0x510 <moveToPickUpPoint+0x5a>
    PORTD &= ~((1<<OUT_MOTOR_X1) | (1<<OUT_MOTOR_X2));
}

void motorYoff(void)
{
    PORTD &= ~(1<<OUT_MOTOR_Y1);
 4e8:	5e 98       	cbi	0x0b, 6	; 11
    PORTB &= ~(1<<OUT_MOTOR_Y2);
 4ea:	2b 98       	cbi	0x05, 3	; 5
            motorYturn(DOWN);
        }
        else {
            motorYoff();
        }
        xlimitreached = (PINC & 1<<IN_X_AXIS_LIMIT) ? 0: 1;
 4ec:	86 b1       	in	r24, 0x06	; 6
 4ee:	91 e0       	ldi	r25, 0x01	; 1
 4f0:	85 fb       	bst	r24, 5
 4f2:	88 27       	eor	r24, r24
 4f4:	80 f9       	bld	r24, 0
 4f6:	89 27       	eor	r24, r25
        ylimitreached = (PIND & 1<<IN_Y_AXIS_LIMIT) ? 0: 1;
 4f8:	c9 b1       	in	r28, 0x09	; 9
 4fa:	c2 fb       	bst	r28, 2
 4fc:	cc 27       	eor	r28, r28
 4fe:	c0 f9       	bld	r28, 0
 500:	c9 27       	eor	r28, r25
        positionreached = xlimitreached && ylimitreached;
 502:	81 11       	cpse	r24, r1
 504:	e8 cf       	rjmp	.-48     	; 0x4d6 <moveToPickUpPoint+0x20>
    ylimitreached = (PIND & 1<<IN_Y_AXIS_LIMIT) ? 0: 1;
    positionreached = xlimitreached && ylimitreached;
    
    while(!positionreached){
        if(!xlimitreached) {
            motorXturn(RIGHT);
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	0e 94 03 01 	call	0x206	; 0x206 <motorXturn>
        }
        else {
            motorXoff();
        }
        
        if(!ylimitreached){
 50c:	c1 11       	cpse	r28, r1
 50e:	ec cf       	rjmp	.-40     	; 0x4e8 <moveToPickUpPoint+0x32>
            motorYturn(DOWN);
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	0e 94 40 01 	call	0x280	; 0x280 <motorYturn>
 516:	ea cf       	rjmp	.-44     	; 0x4ec <moveToPickUpPoint+0x36>
        }
        xlimitreached = (PINC & 1<<IN_X_AXIS_LIMIT) ? 0: 1;
        ylimitreached = (PIND & 1<<IN_Y_AXIS_LIMIT) ? 0: 1;
        positionreached = xlimitreached && ylimitreached;
    }
    allOff();  // May not have reached X or Y off so...
 518:	0e 94 d6 00 	call	0x1ac	; 0x1ac <allOff>
    moveZout();
 51c:	0e 94 51 02 	call	0x4a2	; 0x4a2 <moveZout>
    globalXposition = 0;
 520:	10 92 00 01 	sts	0x0100, r1
    globalXpulses = 0;
 524:	10 92 02 01 	sts	0x0102, r1
    globalYposition = 0;
 528:	10 92 04 01 	sts	0x0104, r1
    globalYpulses = 0;
 52c:	10 92 01 01 	sts	0x0101, r1
    globalYpulsesActual = 0;
 530:	10 92 03 01 	sts	0x0103, r1
    //allOff();
}
 534:	cf 91       	pop	r28
 536:	08 95       	ret

00000538 <motorXoff>:
    }
}

void motorXoff(void)
{
    PORTD &= ~((1<<OUT_MOTOR_X1) | (1<<OUT_MOTOR_X2));
 538:	8b b1       	in	r24, 0x0b	; 11
 53a:	87 7d       	andi	r24, 0xD7	; 215
 53c:	8b b9       	out	0x0b, r24	; 11
 53e:	08 95       	ret

00000540 <motorYoff>:
}

void motorYoff(void)
{
    PORTD &= ~(1<<OUT_MOTOR_Y1);
 540:	5e 98       	cbi	0x0b, 6	; 11
    PORTB &= ~(1<<OUT_MOTOR_Y2);
 542:	2b 98       	cbi	0x05, 3	; 5
 544:	08 95       	ret

00000546 <motorZoff>:
}

void motorZoff(void)
{
    PORTB &= ~((1<<OUT_MOTOR_Z1) | (1<<OUT_MOTOR_Z2));
 546:	85 b1       	in	r24, 0x05	; 5
 548:	89 7f       	andi	r24, 0xF9	; 249
 54a:	85 b9       	out	0x05, r24	; 5
 54c:	08 95       	ret

0000054e <ledOn>:


void ledOn(void)
{
    //PORTD |= (1<<OUT_LED);
    PORTD &= ~(1<<OUT_LED);
 54e:	58 98       	cbi	0x0b, 0	; 11
 550:	08 95       	ret

00000552 <ledOff>:
}

void ledOff(void)
{
    PORTD |= (1<<OUT_LED);
 552:	58 9a       	sbi	0x0b, 0	; 11
 554:	08 95       	ret

00000556 <ledToggle>:
    //PORTD &= ~(1<<OUT_LED);
}

void ledToggle(void)
{
    PORTD ^= (1<<OUT_LED);
 556:	8b b1       	in	r24, 0x0b	; 11
 558:	91 e0       	ldi	r25, 0x01	; 1
 55a:	89 27       	eor	r24, r25
 55c:	8b b9       	out	0x0b, r24	; 11
 55e:	08 95       	ret

00000560 <readPotMeter>:
 560:	80 91 7a 00 	lds	r24, 0x007A
 564:	80 64       	ori	r24, 0x40	; 64
 566:	80 93 7a 00 	sts	0x007A, r24
 56a:	80 91 7a 00 	lds	r24, 0x007A
 56e:	86 fd       	sbrc	r24, 6
 570:	fc cf       	rjmp	.-8      	; 0x56a <readPotMeter+0xa>
 572:	80 91 78 00 	lds	r24, 0x0078
 576:	20 91 79 00 	lds	r18, 0x0079
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	92 2b       	or	r25, r18
 57e:	08 95       	ret

00000580 <main>:
 580:	0e 94 75 00 	call	0xea	; 0xea <init_mcu>
 584:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <moveZin>
 588:	2f e3       	ldi	r18, 0x3F	; 63
 58a:	8d e0       	ldi	r24, 0x0D	; 13
 58c:	93 e0       	ldi	r25, 0x03	; 3
 58e:	21 50       	subi	r18, 0x01	; 1
 590:	80 40       	sbci	r24, 0x00	; 0
 592:	90 40       	sbci	r25, 0x00	; 0
 594:	e1 f7       	brne	.-8      	; 0x58e <main+0xe>
 596:	00 c0       	rjmp	.+0      	; 0x598 <main+0x18>
 598:	00 00       	nop
 59a:	61 e0       	ldi	r22, 0x01	; 1
 59c:	85 e0       	ldi	r24, 0x05	; 5
 59e:	0e 94 47 01 	call	0x28e	; 0x28e <moveToPosition>
 5a2:	2f eb       	ldi	r18, 0xBF	; 191
 5a4:	87 e2       	ldi	r24, 0x27	; 39
 5a6:	99 e0       	ldi	r25, 0x09	; 9
 5a8:	21 50       	subi	r18, 0x01	; 1
 5aa:	80 40       	sbci	r24, 0x00	; 0
 5ac:	90 40       	sbci	r25, 0x00	; 0
 5ae:	e1 f7       	brne	.-8      	; 0x5a8 <main+0x28>
 5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <main+0x32>
 5b2:	00 00       	nop
 5b4:	62 e0       	ldi	r22, 0x02	; 2
 5b6:	85 e0       	ldi	r24, 0x05	; 5
 5b8:	0e 94 47 01 	call	0x28e	; 0x28e <moveToPosition>
 5bc:	2f eb       	ldi	r18, 0xBF	; 191
 5be:	87 e2       	ldi	r24, 0x27	; 39
 5c0:	99 e0       	ldi	r25, 0x09	; 9
 5c2:	21 50       	subi	r18, 0x01	; 1
 5c4:	80 40       	sbci	r24, 0x00	; 0
 5c6:	90 40       	sbci	r25, 0x00	; 0
 5c8:	e1 f7       	brne	.-8      	; 0x5c2 <main+0x42>
 5ca:	00 c0       	rjmp	.+0      	; 0x5cc <main+0x4c>
 5cc:	00 00       	nop
 5ce:	63 e0       	ldi	r22, 0x03	; 3
 5d0:	85 e0       	ldi	r24, 0x05	; 5
 5d2:	0e 94 47 01 	call	0x28e	; 0x28e <moveToPosition>
 5d6:	2f eb       	ldi	r18, 0xBF	; 191
 5d8:	87 e2       	ldi	r24, 0x27	; 39
 5da:	99 e0       	ldi	r25, 0x09	; 9
 5dc:	21 50       	subi	r18, 0x01	; 1
 5de:	80 40       	sbci	r24, 0x00	; 0
 5e0:	90 40       	sbci	r25, 0x00	; 0
 5e2:	e1 f7       	brne	.-8      	; 0x5dc <main+0x5c>
 5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <main+0x66>
 5e6:	00 00       	nop
 5e8:	64 e0       	ldi	r22, 0x04	; 4
 5ea:	85 e0       	ldi	r24, 0x05	; 5
 5ec:	0e 94 47 01 	call	0x28e	; 0x28e <moveToPosition>
 5f0:	2f eb       	ldi	r18, 0xBF	; 191
 5f2:	87 e2       	ldi	r24, 0x27	; 39
 5f4:	99 e0       	ldi	r25, 0x09	; 9
 5f6:	21 50       	subi	r18, 0x01	; 1
 5f8:	80 40       	sbci	r24, 0x00	; 0
 5fa:	90 40       	sbci	r25, 0x00	; 0
 5fc:	e1 f7       	brne	.-8      	; 0x5f6 <main+0x76>
 5fe:	00 c0       	rjmp	.+0      	; 0x600 <main+0x80>
 600:	00 00       	nop
 602:	65 e0       	ldi	r22, 0x05	; 5
 604:	85 e0       	ldi	r24, 0x05	; 5
 606:	0e 94 47 01 	call	0x28e	; 0x28e <moveToPosition>
 60a:	2f eb       	ldi	r18, 0xBF	; 191
 60c:	87 e2       	ldi	r24, 0x27	; 39
 60e:	99 e0       	ldi	r25, 0x09	; 9
 610:	21 50       	subi	r18, 0x01	; 1
 612:	80 40       	sbci	r24, 0x00	; 0
 614:	90 40       	sbci	r25, 0x00	; 0
 616:	e1 f7       	brne	.-8      	; 0x610 <main+0x90>
 618:	00 c0       	rjmp	.+0      	; 0x61a <main+0x9a>
 61a:	00 00       	nop
 61c:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <joystickState>
 620:	83 30       	cpi	r24, 0x03	; 3
 622:	31 f1       	breq	.+76     	; 0x670 <main+0xf0>
 624:	84 30       	cpi	r24, 0x04	; 4
 626:	08 f0       	brcs	.+2      	; 0x62a <main+0xaa>
 628:	4f c0       	rjmp	.+158    	; 0x6c8 <main+0x148>
 62a:	81 30       	cpi	r24, 0x01	; 1
 62c:	09 f4       	brne	.+2      	; 0x630 <main+0xb0>
 62e:	54 c0       	rjmp	.+168    	; 0x6d8 <main+0x158>
 630:	82 30       	cpi	r24, 0x02	; 2
 632:	09 f0       	breq	.+2      	; 0x636 <main+0xb6>
 634:	51 c0       	rjmp	.+162    	; 0x6d8 <main+0x158>
 636:	80 e0       	ldi	r24, 0x00	; 0
 638:	0e 94 03 01 	call	0x206	; 0x206 <motorXturn>
 63c:	0e 94 b0 02 	call	0x560	; 0x560 <readPotMeter>
 640:	bc 01       	movw	r22, r24
 642:	80 e0       	ldi	r24, 0x00	; 0
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__floatunsisf>
 64a:	6b 01       	movw	r12, r22
 64c:	7c 01       	movw	r14, r24
 64e:	20 e0       	ldi	r18, 0x00	; 0
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	4c e4       	ldi	r20, 0x4C	; 76
 654:	53 e4       	ldi	r21, 0x43	; 67
 656:	0e 94 75 03 	call	0x6ea	; 0x6ea <__cmpsf2>
 65a:	87 ff       	sbrs	r24, 7
 65c:	0d c0       	rjmp	.+26     	; 0x678 <main+0xf8>
 65e:	34 9b       	sbis	0x06, 4	; 6
 660:	30 c0       	rjmp	.+96     	; 0x6c2 <main+0x142>
 662:	80 e0       	ldi	r24, 0x00	; 0
 664:	0e 94 4a 02 	call	0x494	; 0x494 <motorZturn>
 668:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <joystickState>
 66c:	83 30       	cpi	r24, 0x03	; 3
 66e:	d1 f6       	brne	.-76     	; 0x624 <main+0xa4>
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	0e 94 03 01 	call	0x206	; 0x206 <motorXturn>
 676:	e2 cf       	rjmp	.-60     	; 0x63c <main+0xbc>
 678:	20 e0       	ldi	r18, 0x00	; 0
 67a:	30 e0       	ldi	r19, 0x00	; 0
 67c:	4c e4       	ldi	r20, 0x4C	; 76
 67e:	53 e4       	ldi	r21, 0x43	; 67
 680:	c7 01       	movw	r24, r14
 682:	b6 01       	movw	r22, r12
 684:	0e 94 da 03 	call	0x7b4	; 0x7b4 <__gesf2>
 688:	18 16       	cp	r1, r24
 68a:	54 f4       	brge	.+20     	; 0x6a0 <main+0x120>
 68c:	20 e0       	ldi	r18, 0x00	; 0
 68e:	30 e0       	ldi	r19, 0x00	; 0
 690:	4c e4       	ldi	r20, 0x4C	; 76
 692:	54 e4       	ldi	r21, 0x44	; 68
 694:	c7 01       	movw	r24, r14
 696:	b6 01       	movw	r22, r12
 698:	0e 94 75 03 	call	0x6ea	; 0x6ea <__cmpsf2>
 69c:	18 16       	cp	r1, r24
 69e:	8c f4       	brge	.+34     	; 0x6c2 <main+0x142>
 6a0:	20 e0       	ldi	r18, 0x00	; 0
 6a2:	30 e0       	ldi	r19, 0x00	; 0
 6a4:	4c e4       	ldi	r20, 0x4C	; 76
 6a6:	54 e4       	ldi	r21, 0x44	; 68
 6a8:	c7 01       	movw	r24, r14
 6aa:	b6 01       	movw	r22, r12
 6ac:	0e 94 da 03 	call	0x7b4	; 0x7b4 <__gesf2>
 6b0:	18 16       	cp	r1, r24
 6b2:	0c f0       	brlt	.+2      	; 0x6b6 <main+0x136>
 6b4:	b3 cf       	rjmp	.-154    	; 0x61c <main+0x9c>
 6b6:	33 9b       	sbis	0x06, 3	; 6
 6b8:	04 c0       	rjmp	.+8      	; 0x6c2 <main+0x142>
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	0e 94 4a 02 	call	0x494	; 0x494 <motorZturn>
 6c0:	ad cf       	rjmp	.-166    	; 0x61c <main+0x9c>
 6c2:	0e 94 a3 02 	call	0x546	; 0x546 <motorZoff>
 6c6:	aa cf       	rjmp	.-172    	; 0x61c <main+0x9c>
 6c8:	84 30       	cpi	r24, 0x04	; 4
 6ca:	59 f0       	breq	.+22     	; 0x6e2 <main+0x162>
 6cc:	85 30       	cpi	r24, 0x05	; 5
 6ce:	21 f4       	brne	.+8      	; 0x6d8 <main+0x158>
 6d0:	81 e0       	ldi	r24, 0x01	; 1
 6d2:	0e 94 40 01 	call	0x280	; 0x280 <motorYturn>
 6d6:	b2 cf       	rjmp	.-156    	; 0x63c <main+0xbc>
 6d8:	0e 94 9c 02 	call	0x538	; 0x538 <motorXoff>
 6dc:	0e 94 a0 02 	call	0x540	; 0x540 <motorYoff>
 6e0:	ad cf       	rjmp	.-166    	; 0x63c <main+0xbc>
 6e2:	80 e0       	ldi	r24, 0x00	; 0
 6e4:	0e 94 40 01 	call	0x280	; 0x280 <motorYturn>
 6e8:	a9 cf       	rjmp	.-174    	; 0x63c <main+0xbc>

000006ea <__cmpsf2>:
 6ea:	40 d0       	rcall	.+128    	; 0x76c <__fp_cmp>
 6ec:	08 f4       	brcc	.+2      	; 0x6f0 <__cmpsf2+0x6>
 6ee:	81 e0       	ldi	r24, 0x01	; 1
 6f0:	08 95       	ret

000006f2 <__floatunsisf>:
 6f2:	e8 94       	clt
 6f4:	09 c0       	rjmp	.+18     	; 0x708 <__floatsisf+0x12>

000006f6 <__floatsisf>:
 6f6:	97 fb       	bst	r25, 7
 6f8:	3e f4       	brtc	.+14     	; 0x708 <__floatsisf+0x12>
 6fa:	90 95       	com	r25
 6fc:	80 95       	com	r24
 6fe:	70 95       	com	r23
 700:	61 95       	neg	r22
 702:	7f 4f       	sbci	r23, 0xFF	; 255
 704:	8f 4f       	sbci	r24, 0xFF	; 255
 706:	9f 4f       	sbci	r25, 0xFF	; 255
 708:	99 23       	and	r25, r25
 70a:	a9 f0       	breq	.+42     	; 0x736 <__floatsisf+0x40>
 70c:	f9 2f       	mov	r31, r25
 70e:	96 e9       	ldi	r25, 0x96	; 150
 710:	bb 27       	eor	r27, r27
 712:	93 95       	inc	r25
 714:	f6 95       	lsr	r31
 716:	87 95       	ror	r24
 718:	77 95       	ror	r23
 71a:	67 95       	ror	r22
 71c:	b7 95       	ror	r27
 71e:	f1 11       	cpse	r31, r1
 720:	f8 cf       	rjmp	.-16     	; 0x712 <__floatsisf+0x1c>
 722:	fa f4       	brpl	.+62     	; 0x762 <__floatsisf+0x6c>
 724:	bb 0f       	add	r27, r27
 726:	11 f4       	brne	.+4      	; 0x72c <__floatsisf+0x36>
 728:	60 ff       	sbrs	r22, 0
 72a:	1b c0       	rjmp	.+54     	; 0x762 <__floatsisf+0x6c>
 72c:	6f 5f       	subi	r22, 0xFF	; 255
 72e:	7f 4f       	sbci	r23, 0xFF	; 255
 730:	8f 4f       	sbci	r24, 0xFF	; 255
 732:	9f 4f       	sbci	r25, 0xFF	; 255
 734:	16 c0       	rjmp	.+44     	; 0x762 <__floatsisf+0x6c>
 736:	88 23       	and	r24, r24
 738:	11 f0       	breq	.+4      	; 0x73e <__floatsisf+0x48>
 73a:	96 e9       	ldi	r25, 0x96	; 150
 73c:	11 c0       	rjmp	.+34     	; 0x760 <__floatsisf+0x6a>
 73e:	77 23       	and	r23, r23
 740:	21 f0       	breq	.+8      	; 0x74a <__floatsisf+0x54>
 742:	9e e8       	ldi	r25, 0x8E	; 142
 744:	87 2f       	mov	r24, r23
 746:	76 2f       	mov	r23, r22
 748:	05 c0       	rjmp	.+10     	; 0x754 <__floatsisf+0x5e>
 74a:	66 23       	and	r22, r22
 74c:	71 f0       	breq	.+28     	; 0x76a <__floatsisf+0x74>
 74e:	96 e8       	ldi	r25, 0x86	; 134
 750:	86 2f       	mov	r24, r22
 752:	70 e0       	ldi	r23, 0x00	; 0
 754:	60 e0       	ldi	r22, 0x00	; 0
 756:	2a f0       	brmi	.+10     	; 0x762 <__floatsisf+0x6c>
 758:	9a 95       	dec	r25
 75a:	66 0f       	add	r22, r22
 75c:	77 1f       	adc	r23, r23
 75e:	88 1f       	adc	r24, r24
 760:	da f7       	brpl	.-10     	; 0x758 <__floatsisf+0x62>
 762:	88 0f       	add	r24, r24
 764:	96 95       	lsr	r25
 766:	87 95       	ror	r24
 768:	97 f9       	bld	r25, 7
 76a:	08 95       	ret

0000076c <__fp_cmp>:
 76c:	99 0f       	add	r25, r25
 76e:	00 08       	sbc	r0, r0
 770:	55 0f       	add	r21, r21
 772:	aa 0b       	sbc	r26, r26
 774:	e0 e8       	ldi	r30, 0x80	; 128
 776:	fe ef       	ldi	r31, 0xFE	; 254
 778:	16 16       	cp	r1, r22
 77a:	17 06       	cpc	r1, r23
 77c:	e8 07       	cpc	r30, r24
 77e:	f9 07       	cpc	r31, r25
 780:	c0 f0       	brcs	.+48     	; 0x7b2 <__fp_cmp+0x46>
 782:	12 16       	cp	r1, r18
 784:	13 06       	cpc	r1, r19
 786:	e4 07       	cpc	r30, r20
 788:	f5 07       	cpc	r31, r21
 78a:	98 f0       	brcs	.+38     	; 0x7b2 <__fp_cmp+0x46>
 78c:	62 1b       	sub	r22, r18
 78e:	73 0b       	sbc	r23, r19
 790:	84 0b       	sbc	r24, r20
 792:	95 0b       	sbc	r25, r21
 794:	39 f4       	brne	.+14     	; 0x7a4 <__fp_cmp+0x38>
 796:	0a 26       	eor	r0, r26
 798:	61 f0       	breq	.+24     	; 0x7b2 <__fp_cmp+0x46>
 79a:	23 2b       	or	r18, r19
 79c:	24 2b       	or	r18, r20
 79e:	25 2b       	or	r18, r21
 7a0:	21 f4       	brne	.+8      	; 0x7aa <__fp_cmp+0x3e>
 7a2:	08 95       	ret
 7a4:	0a 26       	eor	r0, r26
 7a6:	09 f4       	brne	.+2      	; 0x7aa <__fp_cmp+0x3e>
 7a8:	a1 40       	sbci	r26, 0x01	; 1
 7aa:	a6 95       	lsr	r26
 7ac:	8f ef       	ldi	r24, 0xFF	; 255
 7ae:	81 1d       	adc	r24, r1
 7b0:	81 1d       	adc	r24, r1
 7b2:	08 95       	ret

000007b4 <__gesf2>:
 7b4:	db df       	rcall	.-74     	; 0x76c <__fp_cmp>
 7b6:	08 f4       	brcc	.+2      	; 0x7ba <__gesf2+0x6>
 7b8:	8f ef       	ldi	r24, 0xFF	; 255
 7ba:	08 95       	ret

000007bc <_exit>:
 7bc:	f8 94       	cli

000007be <__stop_program>:
 7be:	ff cf       	rjmp	.-2      	; 0x7be <__stop_program>
